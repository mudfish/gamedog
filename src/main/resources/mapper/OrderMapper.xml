<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="orderMapper">
    <resultMap id="orderMap" type="com.laoxu.gamedog.model.order.Order">
        <result property="id" column="ID"/>
        <result property="productId" column="product_id"/>
        <result property="orderNo" column="order_no"/>
        <result property="qty" column="qty"/>
        <result property="amount" column="amount"/>
        <result property="status" column="status"/>
        <result property="paySource" column="pay_source"/>
        <result property="payNo" column="pay_no"/>
        <result property="contact" column="contact"/>
        <result property="creater" column="CREATER"/>
        <result property="createTime" column="CREATE_TIME"/>
        <result property="updater" column="UPDATER"/>
        <result property="updateTime" column="UPDATE_TIME"/>
    </resultMap>

    <insert id="insert" parameterType="com.laoxu.gamedog.model.order.Order">
      insert into orders (
              product_id,
              order_no,
              qty,
              amount,
              status,
              pay_source,
              pay_no,
              contact,
              creater,
              create_time,
              updater,
              update_time
              )
      VALUES (
            #{productId},
            #{orderNo},
            #{qty},
            #{amount},
            #{status},
            #{paySource},
            #{payNo},
            #{contact},
            #{creater},
            #{createTime},
            #{updater},
            #{updateTime}
          )
    </insert>

    <update id="update" parameterType="com.laoxu.gamedog.model.order.Order">
        update orders
        set order_no=#{orderNo},
            qty=#{qty},
            product_id=#{productId},
            amount = #{amount},
            updater=#{updater},
            update_time=#{updateTime}
        where id=#{id}
    </update>

    <delete id="deleteById">
        DELETE FROM orders
        WHERE id = #{id}
    </delete>

    <delete id="deleteByIds">
        DELETE FROM orders
        WHERE id IN
        <foreach collection="idAry" index="index" item="item" open="(" separator="," close=")">
            #{item}
        </foreach>
    </delete>

    <select id="load" parameterType="java.lang.Long" resultMap="orderMap">
        select id,
               product_id,
               order_no,
               qty,
               amount,
               creater,
               create_time,
               updater,
               update_time
        from orders
        where id = #{id}
    </select>

    <select id="selectAll" resultType="map">
        select t1.id,
               t1.product_id as "productId",
               t2.name as "productName",
               t1.order_no as "orderNo",
               t1.qty as "qty",
               t1.amount as "amount",
               DATE_FORMAT(t1.create_time,'%Y-%m-%d %H:%I:%S') as "createTime",
               (case t1.status when 0 then '未付款' else '支付成功' end) as "status",
               (case t1.pay_source when 'WEIXIN' then '微信' when 'ALIPAY' then '支付宝' else '未知' end) as "paySource",
               t1.contact
        from orders t1 left join product t2 on t1.product_id=t2.id
        <where>
            <if test="productId!=null and productId!=0">
                t1.product_id = #{productId}
            </if>
            <if test="orderNo!=null and orderNo!=''">
                and t1.order_no like concat('%',#{orderNo},'%')
            </if>
        </where>
        order by t1.update_time desc limit #{offset},#{limit}
    </select>

    <select id="selectList" resultType="map">
        select  t1.id,
                t1.product_id as "productId",
                t2.name as "productName",
                t1.order_no as "orderNo",
                t1.qty as "qty",
                t1.amount as "amount",
                DATE_FORMAT(t1.create_time,'%Y-%m-%d %H:%I:%S') as "createTime",
                (case t1.status when 0 then '未付款' else '支付成功' end) as "status",
                (case t1.pay_source when 'WEIXIN' then '微信' when 'ALIPAY' then '支付宝' else '未知' end) as "paySource",
                t1.contact
        from orders t1 left join product t2 on t1.product_id=t2.id
        <where>
            <if test="contact!=null and contact!=0">
                t1.contact = #{contact}
            </if>
            <if test="orderNo!=null and orderNo!=''">
                and t1.order_no = #{orderNo}
            </if>
        </where>
        order by t1.update_time desc
    </select>

    <select id="selectByParam" parameterType="java.lang.String" resultType="map">
        select  t1.id,
        t1.product_id as "productId",
        t2.name as "productName",
        t1.order_no as "orderNo",
        t1.qty as "qty",
        t1.amount as "amount",
        DATE_FORMAT(t1.create_time,'%Y-%m-%d %H:%I:%S') as "createTime",
        (case t1.status when 0 then '未付款' else '支付成功' end) as "status",
        (case t1.pay_source when 'WEIXIN' then '微信' when 'ALIPAY' then '支付宝' else '未知' end) as "paySource",
        t1.contact
        from orders t1 left join product t2 on t1.product_id=t2.id
        where t1.contact = #{search} or t1.order_no = #{orderNo}
        order by t1.update_time desc
    </select>

    <select id="count" parameterType="Map" resultType="java.lang.Integer">
        select count(*)
        from orders
        <where>
            <if test="orderNo!=null and orderNo!=''">
                AND order_no = #{orderNo}
            </if>
        </where>
    </select>
</mapper>